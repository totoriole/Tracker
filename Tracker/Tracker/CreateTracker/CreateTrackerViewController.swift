//
//  CreateTrackerViewController.swift
//  Tracker
//
//  Created by Bumbie on 21.11.2023.
//

import UIKit

// MARK: - –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–µ–∫–µ—Ä–∞–º–∏
protocol TrackersActions {
    func appendTracker(tracker: Tracker)
    func reload()
    func showFirstScreen()
}

final class CreateTrackerViewController: UIViewController {
    
    var trackersViewController: TrackersActions? // –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª—É TrackersActions. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–º —ç—Ç–æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª.
    let cellReuseIdentifier = "CreateTrackersTableViewCell"
    
    private var selectedDays: [Weekday] = []
    private let colors: [UIColor] = UIColor.selection
    
    private let header: UILabel = {
        let header = UILabel()
        header.translatesAutoresizingMaskIntoConstraints = false
        header.text = "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
        header.font = .systemFont(ofSize: 16, weight: .medium)
        header.textColor = .blackday
        return header
    }()
    
    private let addTrackerName: UITextField = {
        let addTrackerName = UITextField()
        addTrackerName.translatesAutoresizingMaskIntoConstraints = false
        addTrackerName.placeholder = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"
        addTrackerName.backgroundColor = .whiteBackground
        addTrackerName.layer.cornerRadius = 16
        let leftView = UIView(frame: CGRect(x: 0, y: 0, width: 16, height: 0))
        addTrackerName.leftView = leftView
        addTrackerName.leftViewMode = .always
        addTrackerName.keyboardType = .default
        addTrackerName.returnKeyType = .done
        addTrackerName.becomeFirstResponder()
        return addTrackerName
    }()
    
    private lazy var cancelButton: UIButton = {
        let cancelButton = UIButton(type: .custom)
        cancelButton.setTitleColor(.redtext, for: .normal)
        cancelButton.layer.borderWidth = 1.0
        cancelButton.layer.borderColor = UIColor.redtext.cgColor
        cancelButton.layer.cornerRadius = 16
        cancelButton.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        cancelButton.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        cancelButton.addTarget(self, action: #selector(didTapCancelButton), for: .touchUpInside)
        cancelButton.translatesAutoresizingMaskIntoConstraints = false
        return cancelButton
    }()
    
    private let trackersTableView: UITableView = {
        let trackersTableView = UITableView()
        trackersTableView.translatesAutoresizingMaskIntoConstraints = false
        return trackersTableView
    }()
    
    private lazy var clearButton: UIButton = {
        let clearButton = UIButton(type: .custom)
        clearButton.setImage(UIImage(named: "cleanKeyboard"), for: .normal)
        clearButton.frame = CGRect(x: 0, y: 0, width: 17, height: 17)
        clearButton.contentMode = .scaleAspectFit
        clearButton.addTarget(self, action: #selector(didTapClean), for: .touchUpInside)
        clearButton.isHidden = true
        let paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 29, height: 17))
        paddingView.addSubview(clearButton)
        addTrackerName.rightView = paddingView
        addTrackerName.rightViewMode = .whileEditing
        return clearButton
    }()
    
    private lazy var createButton: UIButton = {
        let createButton: UIButton = UIButton(type: .custom)
        createButton.setTitleColor(.whiteday, for: .normal)
        createButton.backgroundColor = .greyYP
        createButton.layer.cornerRadius = 16
        createButton.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        createButton.setTitle("–°–æ–∑–¥–∞—Ç—å", for: .normal)
        createButton.addTarget(self, action: #selector(didTapCreateButton), for: .touchUpInside)
        createButton.translatesAutoresizingMaskIntoConstraints = false
        createButton.isEnabled = false
        return createButton
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        view.backgroundColor = .whiteday
        configureViews()
        configureConstraints()
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü—ã
        addTrackerName.delegate = self
        trackersTableView.delegate = self
        trackersTableView.dataSource = self
        trackersTableView.register(CreateTrackerViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)
        trackersTableView.layer.cornerRadius = 16
        trackersTableView.separatorStyle = .none
    }
// MARK: - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    private func configureViews() {
        view.addSubview(header)
        view.addSubview(addTrackerName)
        view.addSubview(trackersTableView)
        view.addSubview(cancelButton)
        view.addSubview(createButton)
    }
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    func configureConstraints() {
        NSLayoutConstraint.activate([
            view.topAnchor.constraint(equalTo: view.topAnchor),
            view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            header.topAnchor.constraint(equalTo: view.topAnchor, constant: 26),
            header.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            addTrackerName.topAnchor.constraint(equalTo: header.bottomAnchor, constant: 38),
            addTrackerName.centerXAnchor.constraint(equalTo: header.centerXAnchor),
            addTrackerName.heightAnchor.constraint(equalToConstant: 75),
            addTrackerName.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            addTrackerName.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            trackersTableView.topAnchor.constraint(equalTo: addTrackerName.bottomAnchor, constant: 24),
            trackersTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            trackersTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            trackersTableView.heightAnchor.constraint(equalToConstant: 149),
            cancelButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -34),
            cancelButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            cancelButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -(view.frame.width/2) - 4),
            cancelButton.heightAnchor.constraint(equalToConstant: 60),
            createButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -34),
            createButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            createButton.heightAnchor.constraint(equalToConstant: 60),
            createButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: (view.frame.width/2) + 4)
        ])
    }
// MARK: - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
    @objc private func didTapClean() {
        // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        addTrackerName.text = ""
        clearButton.isHidden = true
    }
    
    @objc private func didTapCancelButton() {
        // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        dismiss(animated: true)
    }
    
    @objc private func didTapCreateButton() {
        // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        guard let text = addTrackerName.text, !text.isEmpty else {
            return
        }
        let newTracker = Tracker(title: text, color: colors[Int.random(in: 0..<self.colors.count)], emoji: "üòú", schedule: self.selectedDays)
        trackersViewController?.appendTracker(tracker: newTracker)
        trackersViewController?.reload()
        self.view.window?.rootViewController?.dismiss(animated: true, completion: nil)
    }
}

// MARK: - SelectedDays
extension CreateTrackerViewController: SelectedDays {
    func save(indicies: [Int]) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
        for index in indicies {
            self.selectedDays.append(Weekday.allCases[index])
        }
    }
}

// MARK: - UITableViewDelegate
extension CreateTrackerViewController: UITableViewDelegate {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —è—á–µ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75
    }
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è—á–µ–π–∫–∏
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row == 1 {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ScheduleViewController –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ createTrackerViewController
            let scheduleViewController = ScheduleViewController()
            scheduleViewController.createTrackerViewController = self
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ScheduleViewController
            present(scheduleViewController, animated: true, completion: nil)
        }
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏
        trackersTableView.deselectRow(at: indexPath, animated: true)
    }
    
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —è—á–µ–π–∫–∏
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤–Ω–∏–∑—É —è—á–µ–π–∫–∏
        let separatorInset: CGFloat = 16
        let separatorWidth = tableView.bounds.width - separatorInset * 2
        let separatorHeight: CGFloat = 1.0
        let separatorX = separatorInset
        let separatorY = cell.frame.height - separatorHeight
        let separatorView = UIView(frame: CGRect(x: separatorX, y: separatorY, width: separatorWidth, height: separatorHeight))
        separatorView.backgroundColor = .greyYP
        cell.addSubview(separatorView)
    }
}

// MARK: - UITableViewDataSource
extension CreateTrackerViewController: UITableViewDataSource {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Å–µ–∫—Ü–∏–∏
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 2
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        // –°–æ–∑–¥–∞–µ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as? CreateTrackerViewCell else { return UITableViewCell() }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞
        if indexPath.row == 0 {
            cell.update(with: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        } else if indexPath.row == 1 {
            cell.update(with: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        }
        return cell
    }
}

// MARK: - UITextFieldDelegate
extension CreateTrackerViewController: UITextFieldDelegate {
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
    func textFieldDidChangeSelection(_ textField: UITextField) {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ
        clearButton.isHidden = textField.text?.isEmpty ?? true
        // –í–∫–ª—é—á–∞–µ–º –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ
        if textField.text?.isEmpty ?? false {
            createButton.isEnabled = false
            createButton.backgroundColor = .greyYP
        } else {
            createButton.isEnabled = true
            createButton.backgroundColor = .blackday
        }
    }
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ Return –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        textField.resignFirstResponder()
        return true
    }
}
