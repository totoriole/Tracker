//
//  IrregularEventViewController.swift
//  Tracker
//
//  Created by Bumbie on 21.11.2023.
//

import UIKit

final class IrregularEventViewController: UIViewController {
    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è—á–µ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    let irregularEventCellReuseIdentifier = "IrregularEventTableViewCell"
    // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–µ–ª–µ–≥–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ—Ä–µ
    var trackerScreenViewController: TrackersActions?
    // –ú–∞—Å—Å–∏–≤ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    private let colors: [UIColor] = UIColor.selection
    
    private let label: UILabel = {
        let label = UILabel()
        label.text = "–ù–æ–≤–æ–µ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
        label.font = .systemFont(ofSize: 16, weight: .medium)
        label.textColor = .blackday
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let addEventName: UITextField = {
        let textField = UITextField()
        textField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"
        textField.backgroundColor = .backgroundday
        textField.layer.cornerRadius = 16
        let view = UIView(frame: CGRect(x: 0, y: 0, width: 16, height: 0))
        textField.leftView = view
        textField.leftViewMode = .always
        textField.returnKeyType = .done
        textField.keyboardType = .default
        textField.becomeFirstResponder()
        textField.translatesAutoresizingMaskIntoConstraints = false
        return textField
    }()
    
    private let irregularEventTableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        return tableView
    }()
    
    private lazy var cancelButton: UIButton = {
        let button = UIButton(type: .custom)
        button.setTitleColor(.redtext, for: .normal)
        button.layer.borderWidth = 1.0
        button.layer.borderColor = UIColor.redtext.cgColor
        button.layer.cornerRadius = 16
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        button.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        button.addTarget(self, action: #selector(didTapCancelButton), for: .touchUpInside)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private lazy var cleanButton: UIButton = {
        let button = UIButton(type: .custom)
        button.setImage(UIImage(named: "cleanKeyboard"), for: .normal)
        button.frame = CGRect(x: 0, y: 0, width: 17, height: 17)
        button.contentMode = .scaleAspectFit
        button.addTarget(self, action: #selector(didTapClean), for: .touchUpInside)
        button.isHidden = true
        let paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 29, height: 17))
        paddingView.addSubview(button)
        addEventName.rightView = paddingView
        addEventName.rightViewMode = .whileEditing
        return button
    }()
    
    private lazy var createButton: UIButton = {
        let button = UIButton(type: .custom)
        button.setTitleColor(.whiteday, for: .normal)
        button.backgroundColor = .greyYP
        button.layer.cornerRadius = 16
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        button.setTitle("–°–æ–∑–¥–∞—Ç—å", for: .normal)
        button.addTarget(self, action: #selector(didTapCreateButton), for: .touchUpInside)
        button.isEnabled = false
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .whitebackground
        configureViews()
        configureConstraints()
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ —Ç–∞–±–ª–∏—Ü—ã
        addEventName.delegate = self
        irregularEventTableView.delegate = self
        irregularEventTableView.dataSource = self
        irregularEventTableView.register(IrregularEventCell.self, forCellReuseIdentifier: irregularEventCellReuseIdentifier)
        irregularEventTableView.layer.cornerRadius = 16
        irregularEventTableView.separatorStyle = .none
    }
    
    private func configureViews() {
        view.addSubview(label)
        view.addSubview(addEventName)
        view.addSubview(irregularEventTableView)
        view.addSubview(cancelButton)
        view.addSubview(createButton)
    }
    
    func configureConstraints() {
        NSLayoutConstraint.activate([
            view.topAnchor.constraint(equalTo: view.topAnchor),
            view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            label.topAnchor.constraint(equalTo: view.topAnchor, constant: 26),
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            addEventName.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 38),
            addEventName.centerXAnchor.constraint(equalTo: label.centerXAnchor),
            addEventName.heightAnchor.constraint(equalToConstant: 75),
            addEventName.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            addEventName.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            irregularEventTableView.topAnchor.constraint(equalTo: addEventName.bottomAnchor, constant: 24),
            irregularEventTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            irregularEventTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            irregularEventTableView.heightAnchor.constraint(equalToConstant: 75),
            cancelButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -34),
            cancelButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            cancelButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -(view.frame.width/2) - 4),
            cancelButton.heightAnchor.constraint(equalToConstant: 60),
            createButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -34),
            createButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            createButton.heightAnchor.constraint(equalToConstant: 60),
            createButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: (view.frame.width/2) + 4)
        ])
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
    @objc private func didTapClean() {
        addEventName.text = ""
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    @objc private func didTapCancelButton() {
        dismiss(animated: true)
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    @objc private func didTapCreateButton() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        guard let text = addEventName.text, !text.isEmpty else {
            return
        }
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –µ–≥–æ –≤ TrackerScreenViewController
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–µ–∫–µ—Ä–∞
        let newEvent = Tracker(title: text, color: colors[Int.random(in: 0..<self.colors.count)], emoji: "üëç", schedule: Weekday.allCases)
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ –∫ trackerScreenViewController
        trackerScreenViewController?.appendTracker(tracker: newEvent)
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä
        trackerScreenViewController?.reload()
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        self.view.window?.rootViewController?.dismiss(animated: true, completion: nil)
    }
}

// MARK: - UITableViewDelegate
extension IrregularEventViewController: UITableViewDelegate {
    // –≤—ã—Å–æ—Ç–∞ —è—á–µ–π–∫–∏
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75
    }
    // –°–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—ë –≤—ã–±–µ—Ä–µ—Ç.
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        irregularEventTableView.deselectRow(at: indexPath, animated: true)
    }
}

// MARK: - UITableViewDataSource
extension IrregularEventViewController: UITableViewDataSource {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    // –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞.
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: irregularEventCellReuseIdentifier, for: indexPath) as! IrregularEventCell
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è—á–µ–π–∫—É IrregularEventCell, –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        cell.titleLabel.text = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        return cell
    }
}

// MARK: - UITextFieldDelegate
extension IrregularEventViewController: UITextFieldDelegate {
    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ. . –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è (createButton) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞.
    func textFieldDidChangeSelection(_ textField: UITextField) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—É—Å—Ç–æ –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —Å–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ (cleanButton)
        cleanButton.isHidden = textField.text?.isEmpty ?? true
        if textField.text?.isEmpty ?? false {
            createButton.isEnabled = false
            createButton.backgroundColor = .greyYP
        } else {
            createButton.isEnabled = true
            createButton.backgroundColor = .blackday
        }
    }
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏—à—É Return –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤—ã–∑—ã–≤–∞—è –º–µ—Ç–æ–¥ resignFirstResponder()
        textField.resignFirstResponder()
        return true
    }
}
